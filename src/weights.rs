// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_xnft
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 29.0.0
//! DATE: 2023-12-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `hearthstone`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("karura-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=karura-dev
// --steps=50
// --repeat=20
// --pallet=pallet-xnft
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./
// --template=../unique-chain/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_xnft.
pub trait WeightInfo {
	fn foreign_asset_registration_checks() -> Weight;
}

/// Weights for pallet_xnft using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `XNFT::ForeignAssetToCollection` (r:1 w:0)
	/// Proof: `XNFT::ForeignAssetToCollection` (`max_values`: None, `max_size`: Some(615), added: 3090, mode: `MaxEncodedLen`)
	fn foreign_asset_registration_checks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `4080`
		// Minimum execution time: 4_470_000 picoseconds.
		Weight::from_parts(4_640_000, 4080)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	/// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `XNFT::ForeignAssetToCollection` (r:1 w:0)
	/// Proof: `XNFT::ForeignAssetToCollection` (`max_values`: None, `max_size`: Some(615), added: 3090, mode: `MaxEncodedLen`)
	fn foreign_asset_registration_checks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `4080`
		// Minimum execution time: 4_470_000 picoseconds.
		Weight::from_parts(4_640_000, 4080)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
}

